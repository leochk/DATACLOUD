package datacloud.hadoop.noodle;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Partitioner;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.mapreduce.lib.partition.HashPartitioner;
import org.apache.hadoop.util.GenericOptionsParser;

/*
 * data generated by : ./generateTextfile.sh -t noodle -n 1 -s 100
 */
public class Noodle {

	public static class NoodleMapper
			extends Mapper<LongWritable, Text, Text, Text> {

		private Text word = new Text();

		public void map(LongWritable key, Text value, Context context)
				throws IOException, InterruptedException {

			String line = value.toString();
			StringBuilder k = new StringBuilder();
			StringBuilder v = new StringBuilder();

			/*
			 * split[0] : date, split[1] : user id, split[2] : keywords
			 */
			String[] request = line.toString().split(" ");

			/*
			 * Evaluate time slot
			 */
			String[] date = request[0].split("_");
			int heure = Integer.parseInt(date[date.length - 2]);
			int minute = Integer.parseInt(date[date.length - 1]);
			if (minute < 30)
				k.append(heure + "h00 et " + heure + "h29");
			else
				k.append(heure + "h30 et " + heure + "h59");
			k.append(", month " + date[1]);
			/*
			 * key2 : time slot | month value2 : keywords
			 */
			context.write(new Text(k.toString()),
					new Text(request[2].toString()));
		}
	}

	public static class NoodleReducer extends Reducer<Text, Text, Text, Text> {

		public void reduce(Text key, Iterable<Text> values, Context context)
				throws IOException, InterruptedException {

			Map<String, Integer> cpts = new HashMap<>();

			/*
			 * counting all keywords researched in inputted key time slot
			 */
			for (Text t : values) {
				String[] listKeywords = t.toString().split("\\+");
				for (String keyword : listKeywords) {
					if (cpts.containsKey(keyword)) {
						cpts.put(keyword, cpts.get(keyword) + 1);
					} else {
						cpts.put(keyword, 1);
					}
				}
			}

			/*
			 * evaluate most researched keywords and count request sent by users
			 */
			String most = "";
			int most_cpt = -1;
			int total = 0;
			for (String keyword : cpts.keySet()) {
				total += cpts.get(keyword);

				if (cpts.get(keyword) > most_cpt) {
					most = keyword;
					most_cpt = cpts.get(keyword);
				}
			}

			context.write(key, new Text("| most researched : " + most + " "
					+ most_cpt + " times | total request : " + total));
		}
	}

	public static class NoodlePartitioner extends Partitioner<Text, Text> {

		public int getPartition(Text k, Text v, int nbPartitions) {
			String[] data = k.toString().split(" ");
			
			return Integer.parseInt(data[data.length-1])%nbPartitions;
		}

	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		conf.setBoolean("mapreduce.map.speculative", true);
		conf.setBoolean("mapreduce.reduce.speculative", true);
		String[] otherArgs = new GenericOptionsParser(conf, args)
				.getRemainingArgs();
		if (otherArgs.length != 2) {
			System.err.println("Usage: wordcount <in> <out>");
			System.exit(2);
		}
		Job job = Job.getInstance(conf, "word count");
		// permet d'indiquer le jar qui contient l'ensemble des .class du job à
		// partir d'un nom de classe
		job.setJarByClass(Noodle.class);
		// indique la classe du Mapper
		job.setMapperClass(NoodleMapper.class);
		// indique la classe du Reducer
		job.setReducerClass(NoodleReducer.class);
		// indique la classe de la clé sortie map
		job.setMapOutputKeyClass(Text.class);
		// indique la classe de la valeur sortie map
		job.setMapOutputValueClass(Text.class);
		// indique la classe de la clé de sortie reduce
		job.setOutputKeyClass(Text.class);
		// indique la classe de la clé de sortie reduce
		job.setOutputValueClass(Text.class);
		// indique la classe du format des données d'entrée
		job.setInputFormatClass(TextInputFormat.class);
		// indique la classe du format des données de sortie
		job.setOutputFormatClass(TextOutputFormat.class);
		// indique la classe du partitionneur
		job.setPartitionerClass(NoodlePartitioner.class);
		// nombre de tâche de reduce : il est bien sur possible de changer cette
		// valeur (1 par défaut)
		job.setNumReduceTasks(12);

		// indique le ou les chemins HDFS d'entrée
		FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
		// indique le chemin du dossier de sortie
		final Path outDir = new Path(otherArgs[1]);
		// récupération d'une référence sur le système de fichier HDFS
		FileOutputFormat.setOutputPath(job, outDir);
		// test si le dossier de sortie existe
		final FileSystem fs = FileSystem.get(conf);
		if (fs.exists(outDir)) {
			// on efface le dossier existant, sinon le job ne se lance pas
			fs.delete(outDir, true);
		}

		// soumission de l'application à Yarn
		System.exit(job.waitForCompletion(true) ? 0 : 1);
	}
}
